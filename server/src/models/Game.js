const mongoose = require("mongoose");

const gameSchema = new mongoose.Schema(
  {
    // 기본 식별 정보
    userNum: { type: Number, required: true },
    nickname: { type: String, required: true },
    gameId: { type: Number, required: true },
    seasonId: { type: Number, required: true },

    // 매칭 및 캐릭터 정보
    matchingMode: { type: Number },
    matchingTeamMode: { type: Number },
    characterNum: { type: Number },
    skinCode: { type: Number },
    characterLevel: { type: Number },
    gameRank: { type: Number },

    // 전투 관련 기록
    playerKill: { type: Number },
    playerAssistant: { type: Number },
    monsterKill: { type: Number },
    bestWeapon: { type: Number },
    bestWeaponLevel: { type: Number },

    // 객체 형태의 정보들은 Map 또는 Mixed 타입으로 정의
    masteryLevel: { type: Map, of: Number },
    equipment: { type: Map, of: Number },
    equipmentGrade: { type: Map, of: Number },

    // 버전 및 언어
    versionMajor: { type: Number },
    versionMinor: { type: Number },
    language: { type: String },

    // 스킬 관련 정보
    skillLevelInfo: { type: Map, of: Number },
    skillOrderInfo: { type: Map, of: Number },

    // 서버 및 스탯
    serverName: { type: String },
    maxHp: { type: Number },
    maxSp: { type: Number },
    attackPower: { type: Number },
    defense: { type: Number },
    hpRegen: { type: Number },
    spRegen: { type: Number },
    attackSpeed: { type: Number },
    moveSpeed: { type: Number },
    outOfCombatMoveSpeed: { type: Number },
    sightRange: { type: Number },
    attackRange: { type: Number },
    criticalStrikeChance: { type: Number },
    criticalStrikeDamage: { type: Number },
    coolDownReduction: { type: Number },
    lifeSteal: { type: Number },
    normalLifeSteal: { type: Number },
    skillLifeSteal: { type: Number },
    amplifierToMonster: { type: Number },
    trapDamage: { type: Number },
    bonusCoin: { type: Number },
    gainExp: { type: Number },
    baseExp: { type: Number },
    bonusExp: { type: Number },

    // 시간 및 플레이 관련 정보
    startDtm: { type: Date },
    duration: { type: Number },
    playTime: { type: Number },
    watchTime: { type: Number },
    totalTime: { type: Number },
    survivableTime: { type: Number },
    botAdded: { type: Number },
    botRemain: { type: Number },
    restrictedAreaAccelerated: { type: Number },
    safeAreas: { type: Number },

    // 팀 관련 정보
    teamNumber: { type: Number },
    preMade: { type: Number },
    eventMissionResult: { type: mongoose.Schema.Types.Mixed },
    gainedNormalMmrKFactor: { type: Number },
    victory: { type: Number },

    // 제작/조합 관련 기록
    craftUncommon: { type: Number },
    craftRare: { type: Number },
    craftEpic: { type: Number },
    craftLegend: { type: Number },

    // 피해 및 가한 데미지
    damageToPlayer: { type: Number },
    damageToPlayer_trap: { type: Number },
    damageToPlayer_basic: { type: Number },
    damageToPlayer_skill: { type: Number },
    damageToPlayer_itemSkill: { type: Number },
    damageToPlayer_direct: { type: Number },
    damageToPlayer_uniqueSkill: { type: Number },
    damageFromPlayer: { type: Number },
    damageFromPlayer_trap: { type: Number },
    damageFromPlayer_basic: { type: Number },
    damageFromPlayer_skill: { type: Number },
    damageFromPlayer_itemSkill: { type: Number },
    damageFromPlayer_direct: { type: Number },
    damageFromPlayer_uniqueSkill: { type: Number },
    damageToMonster: { type: Number },
    damageToMonster_trap: { type: Number },
    damageToMonster_basic: { type: Number },
    damageToMonster_skill: { type: Number },
    damageToMonster_itemSkill: { type: Number },
    damageToMonster_direct: { type: Number },
    damageToMonster_uniqueSkill: { type: Number },
    damageFromMonster: { type: Number },
    damageToPlayer_Shield: { type: Number },
    damageOffsetedByShield_Player: { type: Number },
    damageOffsetedByShield_Monster: { type: Number },
    killMonsters: { type: Map, of: Number },

    // 치유, 복구 등
    healAmount: { type: Number },
    teamRecover: { type: Number },
    protectAbsorb: { type: Number },
    addSurveillanceCamera: { type: Number },
    addTelephotoCamera: { type: Number },
    removeSurveillanceCamera: { type: Number },
    removeTelephotoCamera: { type: Number },
    useHyperLoop: { type: Number },
    useSecurityConsole: { type: Number },
    giveUp: { type: Number },
    teamSpectator: { type: Number },

    // 시작 정보 및 경기 설정
    routeIdOfStart: { type: Number },
    routeSlotId: { type: Number },
    placeOfStart: { type: String },
    matchSize: { type: Number },
    teamKill: { type: Number },
    totalFieldKill: { type: Number },
    accountLevel: { type: Number },

    // 킬/데스 관련 상세 정보
    killerUserNum: { type: Number },
    killer: { type: String },
    killDetail: { type: String },
    causeOfDeath: { type: String },
    placeOfDeath: { type: String },
    killerCharacter: { type: String },
    killerWeapon: { type: String },
    killerUserNum2: { type: Number },
    killer2: { type: String },
    killDetail2: { type: String },
    causeOfDeath2: { type: String },
    placeOfDeath2: { type: String },
    killerCharacter2: { type: String },
    killerWeapon2: { type: String },
    killerUserNum3: { type: Number },
    killer3: { type: String },
    killDetail3: { type: String },
    causeOfDeath3: { type: String },
    placeOfDeath3: { type: String },
    killerCharacter3: { type: String },
    killerWeapon3: { type: String },
    fishingCount: { type: Number },
    useEmoticonCount: { type: Number },
    expireDtm: { type: Date },

    // 트레이트 및 기타 배열/객체 정보
    traitFirstCore: { type: Number },
    traitFirstSub: [{ type: Number }],
    traitSecondSub: [{ type: Number }],
    airSupplyOpenCount: [{ type: Number }],
    foodCraftCount: [{ type: Number }],
    beverageCraftCount: [{ type: Number }],
    rankPoint: { type: Number },
    totalTurbineTakeOver: { type: Number },
    usedNormalHealPack: { type: Number },
    usedReinforcedHealPack: { type: Number },
    usedNormalShieldPack: { type: Number },
    usedReinforceShieldPack: { type: Number },
    totalVFCredits: [{ type: Number }],
    activelyGainedCredits: { type: Number },
    usedVFCredits: [{ type: Number }],
    sumUsedVFCredits: { type: Number },
    craftMythic: { type: Number },
    playerDeaths: { type: Number },
    killGamma: { type: Boolean },
    scoredPoint: [{ type: Number }],
    killDetails: { type: String },
    deathDetails: { type: String },
    killsPhaseOne: { type: Number },
    killsPhaseTwo: { type: Number },
    killsPhaseThree: { type: Number },
    deathsPhaseOne: { type: Number },
    deathsPhaseTwo: { type: Number },
    deathsPhaseThree: { type: Number },
    usedPairLoop: { type: Number },
    ccTimeToPlayer: { type: Number },

    // 신용/포인트 관련 정보 (객체형태로 저장)
    creditSource: { type: mongoose.Schema.Types.Mixed },
    boughtInfusion: { type: mongoose.Schema.Types.Mixed },

    // 아이템 전송 관련
    itemTransferredConsole: [{ type: Number }],
    itemTransferredDrone: [{ type: Number }],

    // 탈출/기타 상태
    escapeState: { type: Number },
    totalDoubleKill: { type: Number },
    totalTripleKill: { type: Number },
    totalQuadraKill: { type: Number },
    totalExtraKill: { type: Number },
    collectItemForLog: [{ type: Number }],
    equipFirstItemForLog: { type: Map, of: [Number] },

    // 배틀존 관련 정보
    battleZone1AreaCode: { type: Number },
    battleZone1BattleMark: { type: Number },
    battleZone1ItemCode: [{ type: Number }],
    battleZone2AreaCode: { type: Number },
    battleZone2BattleMark: { type: Number },
    battleZone2ItemCode: [{ type: Number }],
    battleZone3AreaCode: { type: Number },
    battleZone3BattleMark: { type: Number },
    battleZone3ItemCode: [{ type: Number }],
    battleZonePlayerKill: { type: Number },
    battleZoneDeaths: { type: Number },
    battleZone1Winner: { type: Number },
    battleZone2Winner: { type: Number },
    battleZone3Winner: { type: Number },
    battleZone1BattleMarkCount: { type: Number },
    battleZone2BattleMarkCount: { type: Number },
    battleZone3BattleMarkCount: { type: Number },

    // 전술 및 기타 추가 정보
    tacticalSkillGroup: { type: Number },
    tacticalSkillLevel: { type: Number },
    totalGainVFCredit: { type: Number },
    killPlayerGainVFCredit: { type: Number },
    killChickenGainVFCredit: { type: Number },
    killBoarGainVFCredit: { type: Number },
    killWildDogGainVFCredit: { type: Number },
    killWolfGainVFCredit: { type: Number },
    killBearGainVFCredit: { type: Number },
    killOmegaGainVFCredit: { type: Number },
    killBatGainVFCredit: { type: Number },
    killWicklineGainVFCredit: { type: Number },
    killAlphaGainVFCredit: { type: Number },
    killItemBountyGainVFCredit: { type: Number },
    killDroneGainVFCredit: { type: Number },
    killGammaGainVFCredit: { type: Number },
    killTurretGainVFCredit: { type: Number },
    itemShredderGainVFCredit: { type: Number },
    totalUseVFCredit: { type: Number },
    remoteDroneUseVFCreditMySelf: { type: Number },
    remoteDroneUseVFCreditAlly: { type: Number },
    transferConsoleFromMaterialUseVFCredit: { type: Number },
    transferConsoleFromEscapeKeyUseVFCredit: { type: Number },
    transferConsoleFromRevivalUseVFCredit: { type: Number },
    tacticalSkillUpgradeUseVFCredit: { type: Number },
    infusionReRollUseVFCredit: { type: Number },
    infusionTraitUseVFCredit: { type: Number },
    infusionRelicUseVFCredit: { type: Number },
    infusionStoreUseVFCredit: { type: Number },

    // 팀 전투 및 기타 최종 통계
    teamElimination: { type: Number },
    teamDown: { type: Number },
    teamBattleZoneDown: { type: Number },
    teamRepeatDown: { type: Number },
    adaptiveForce: { type: Number },
    adaptiveForceAttack: { type: Number },
    adaptiveForceAmplify: { type: Number },
    skillAmp: { type: Number },
    campFireCraftUncommon: { type: Number },
    campFireCraftRare: { type: Number },
    campFireCraftEpic: { type: Number },
    campFireCraftLegendary: { type: Number },
    cobaltRandomPickRemoveCharacter: { type: Number },
    tacticalSkillUseCount: { type: Number },
    creditRevivalCount: { type: Number },
    creditRevivedOthersCount: { type: Number },
    timeSpentInBriefingRoom: { type: Number },
    IsLeavingBeforeCreditRevivalTerminate: { type: Boolean },

    // CR 관련
    crGetAnimal: { type: Number },
    crGetMutant: { type: Number },
    crGetPhaseStart: { type: Number },
    crGetKill: { type: Number },
    crGetAssist: { type: Number },
    crGetTimeElapsed: { type: Number },
    crGetCreditBonus: { type: Number },
    crUseRemoteDrone: { type: Number },
    crUseUpgradeTacticalSkill: { type: Number },
    crUseTreeOfLife: { type: Number },
    crUseMeteorite: { type: Number },
    crUseMythril: { type: Number },
    crUseForceCore: { type: Number },
    crUseVFBloodSample: { type: Number },
    crUseActivationModule: { type: Number },
    crUseRootkit: { type: Number },

    // MMR, 프리메이드, 기여도 등
    mmrGainInGame: { type: Number },
    mmrLossEntryCost: { type: Number },
    premadeMatchingType: { type: Number },
    viewContribution: { type: Number },
    useReconDrone: { type: Number },
    useEmpDrone: { type: Number },
    exceptPreMadeTeam: { type: Boolean },
    terminateCount: { type: Number },
    clutchCount: { type: Number },
    unknownKill: { type: Number },

    // 날씨 및 설치물 등
    mainWeather: { type: Number },
    subWeather: { type: Number },
    activeInstallation: { type: mongoose.Schema.Types.Mixed },
    useGuideRobot: { type: Number },
    guideRobotRadial: { type: Number },
    guideRobotFlagShip: { type: Number },
    guideRobotSignature: { type: Number },
    crGetByGuideRobot: { type: Number },
    damageToGuideRobot: { type: Number },
    getBuffCubeRed: { type: Number },
    getBuffCubePurple: { type: Number },
    getBuffCubeGreen: { type: Number },
    getBuffCubeGold: { type: Number },
    getBuffCubeSkyBlue: { type: Number },
    sumGetBuffCube: { type: Number },
    hackAttemptLog: { type: mongoose.Schema.Types.Mixed },
    squadRumbleRank: { type: Number },
    teamDownInAutoResurrection: { type: Number },
    teamDownDeactiveAutoResurrection: { type: Number },
    teamRepeatDownInAutoResurrection: { type: Number },
    teamRepeatDownDeactiveAutoResurrection: { type: Number },
    isLeavingBeforeCreditRevivalTerminate: { type: Boolean },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Game", gameSchema);
