name: Deploy ERer # 워크플로 이름 설정

on:
  push:
    branches:
      - main # main 브랜치에 push가 발생하면 실행

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      client: ${{ steps.filter.outputs.client }}
      server: ${{ steps.filter.outputs.server }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Check changed files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            client:
              - 'client/**'
            server:
              - 'server/**'

  build-client:
    needs: changes
    # if: ${{ needs.changes.outputs.client == 'true' }} # 변경 사항 조건 주석 처리 → 항상 실행
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
          if [ $? -ne 0 ]; then
            echo "❌ GHCR 로그인 실패"
            exit 1
          fi
          echo "✅ GHCR 로그인 성공"

      - name: Build and push client image to GHCR
        run: |
          echo "🏗️ Building client image..."
          docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-client:latest ./client
          echo "🚀 Pushing client image to GHCR..."
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-client:latest

      - name: Verify pushed client image
        run: |
          echo "🔎 Checking if client image is available in GHCR..."
          curl -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" https://ghcr.io/v2/${{ secrets.GHCR_USERNAME }}/erer-client/tags/list || {
            echo "❌ Failed to verify client image in GHCR"
            exit 1
          }
          echo "✅ Client image is available in GHCR"

  build-server:
    needs: changes
    # if: ${{ needs.changes.outputs.server == 'true' }} # 변경 사항 조건 주석 처리 → 항상 실행
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
          if [ $? -ne 0 ]; then
            echo "❌ GHCR 로그인 실패"
            exit 1
          fi
          echo "✅ GHCR 로그인 성공"

      - name: Build and push server image to GHCR
        run: |
          echo "🏗️ Building server image..."
          docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-server:latest ./server
          echo "🚀 Pushing server image to GHCR..."
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-server:latest

      - name: Verify pushed server image
        run: |
          echo "🔎 Checking if server image is available in GHCR..."
          curl -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" https://ghcr.io/v2/${{ secrets.GHCR_USERNAME }}/erer-server/tags/list || {
            echo "❌ Failed to verify server image in GHCR"
            exit 1
          }
          echo "✅ Server image is available in GHCR"

  deploy-client:
    needs: build-client
    # if: ${{ needs.changes.outputs.client == 'true' }} # 변경 사항 조건 주석 처리 → 항상 실행
    runs-on: ubuntu-latest
    steps:
      - name: Deploy client to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Pulling latest client image..."
            docker stop erer-client || true
            docker rm erer-client || true
            docker rmi ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-client:latest || true
            docker pull ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-client:latest || {
              echo "❌ Failed to pull client image"
              exit 1
            }
            docker run -d --name erer-client -p 3000:3000 --restart always ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-client:latest

  deploy-server:
    needs: build-server
    # if: ${{ needs.changes.outputs.server == 'true' }} # 변경 사항 조건 주석 처리 → 항상 실행
    runs-on: ubuntu-latest
    steps:
      - name: Deploy server to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Pulling latest server image..."
            docker stop erer-server || true
            docker rm erer-server || true
            docker rmi ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-server:latest || true
            docker pull ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-server:latest || {
              echo "❌ Failed to pull server image"
              exit 1
            }
            docker run -d --name erer-server -p 5000:5000 --restart always ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-server:latest
