name: Deploy ERer

on:
  push:
    branches:
      - main

jobs:
  # 배포 파일 테스트 후에 적용
  # changes:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     client: ${{ steps.filter.outputs.client }}
  #     server: ${{ steps.filter.outputs.server }}
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4

  #     - name: Check changed files
  #       id: filter
  #       uses: dorny/paths-filter@v3
  #       with:
  #         filters: |
  #           client:
  #             - 'client/**'
  #           server:
  #             - 'server/**'

  build-client:
    # needs: changes   # → 파일 변화 감지
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Build and push client image to GHCR
        run: |
          docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-client:latest ./client
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-client:latest

  build-server:
    # needs: changes   # → 파일 변화 감지
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Create .env file
        run: |
          echo "Creating .env file..."
          rm -f ./server/.env
          cat <<EOF > ./server/.env
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          PORT=5000
          API_KEY=${{ secrets.API_KEY }}
          API_URL=${{ secrets.API_URL }}
          CURRENT_SEASON=${{ secrets.CURRENT_SEASON }}
          EOF
          echo ".env file created successfully"

      - name: Build and push server image to GHCR
        run: |
          docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-server:latest ./server
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-server:latest

  deploy-client:
    needs: build-client
    runs-on: ubuntu-latest
    steps:
      - name: Deploy client to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker stop erer-client || true
            docker rm erer-client || true
            docker rmi ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-client:latest || true
            docker pull ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-client:latest
            docker run -d --name erer-client -p 3000:3000 --restart always ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-client:latest

  deploy-server:
    needs: build-server
    runs-on: ubuntu-latest
    steps:
      - name: Deploy server to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker stop erer-server || true
            docker rm erer-server || true
            docker rmi ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-server:latest || true
            docker pull ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-server:latest
            docker run -d --name erer-server -p 5000:5000 --restart always --env-file ./server/.env ghcr.io/${{ secrets.GHCR_USERNAME }}/erer-server:latest
